services:
  proxy:
    image: nginx:latest
    ports:      
      - "80:80"
      - "443:443"
    volumes:
      - ./ProxyServers/Nginx/nginx.conf:/etc/nginx/nginx.conf
    secrets:
      - nginx.cert
      - nginx.key
      - dhparam.pem
    stdin_open: true
    tty: true
    depends_on:
      - pocorchestrationngwebui
      - poc.orchestration.api

  redis:
    image: redis:alpine
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  
  pocorchestrationngwebui:
    image: ${DOCKER_REGISTRY-}pocorchestrationngwebui
    build:
      context: ./ngwebui
      dockerfile: dockerfile
    environment:
      ENV: "dockered-nginx"
    volumes:      
      - "./ngwebui:/app"
      - alpine-node-modules:/app/node_modules
    depends_on:
      - poc.orchestration.api

  poc.orchestration.api:
    image: ${DOCKER_REGISTRY-}pocorchestrationapi
    build:
      context: .
      dockerfile: PoC.Orchestration.Api/Dockerfile
    environment:
      - redis__server__host=redis
      - orchestrator__url=http://poc.orchestration.orchestrator:8080
      - tmdb__api__key=${TMDB_API_KEY}
      - tmdb__api__ReadAccessToken=${TMDB_API_READ_ACCESS_TOKEN}
    depends_on:
      redis:
        condition: service_healthy

  poc.orchestration.orchestrator:
    image: ${DOCKER_REGISTRY-}pocorchestrationorchestrator
    build:
      context: .
      dockerfile: PoC.Orchestration.Orchestrator/Dockerfile
    environment:
      - redis__server__host=redis
      - signalr__server__url=http://poc.orchestration.api:8080
      - tmdb__api__key=${TMDB_API_KEY}
      - tmdb__api__ReadAccessToken=${TMDB_API_READ_ACCESS_TOKEN}
    depends_on:
      redis:
        condition: service_healthy

secrets:
  nginx.cert: 
    file: ./ProxyServers/Certificates/selfsigned.crt
  nginx.key: 
    file: ./ProxyServers/Certificates/selfsigned.key
  dhparam.pem:
    file: ./ProxyServers/Certificates/dhparam.pem

volumes:
  alpine-node-modules:
